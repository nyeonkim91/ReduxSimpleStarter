import React, { Component } from 'react';
// coonect is a function that makes connection(glue) btw React libarary and Redux libarary, and that connection makes usable state
// react-redux is a library for connecting react and redux
import { connect } from 'react-redux';
import { selectBook } from '../actions/index';
// bind action that is generated by action creator made to end up flowing through all the different reducers
// takes return value from selectBook, and flows through all the different reducers in our application
import { bindActionCreators } from 'redux';

class BookList extends Component {
  // onClick, onChange, ... all from CommonJS
  renderList() {
    return this.props.books.map((book) => {
      return (
        <li
          key={book.title}
          onClick={() => this.props.selectBook(book)}
          className="list-group-item">
          {book.title}
        </li>
      )
    })
  }
  render() {
    return (
      <ul className="list-group col-sm-4">
        {this.renderList()}
      </ul>
    )
  }
}

// the glue btw react and redux
// if state ever changes, this container will instantly rerender with the new list of books
// whenever the application state changes the object in the state fucntion will be assgined as props to the component
function mapStateToProps(state) {
  // Whatever is returned will show up as props inside of BookList
  return {
    books: state.books
  };
}

// Anything returned from this function will end up as props on the BookList container
// Above, we can use action using 'this.props.selectBook'
function mapDispatchToProps(dispatch) {
  // Whenever selectBook is called, the result should be passed to all of our reducers
  // selectBook is actual action creator
  // dispatch is a function that takes all these actions and, like funnel, it spits them back out to all the different reducers in our application
  // the purpose of bindActionCreators is to send action automaitcally to all reducers
  return bindActionCreators({ selectBook: selectBook }, dispatch);
}

// Promote BookList from a component to a container - it needs to know about this new dispatch method, selectBook. Make it available as a prop
// export container, not component
// connect takes a function and a component, and produces container
// container is a component that is aware of the state that's contained by redux
export default connect(mapStateToProps, mapDispatchToProps)(BookList);
